

#include <string.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#define in(x) scanf(" %d", &x);
#define LinkedListNode LinkedListNode
typedef struct LinkedListNode LinkedListNode;
struct LinkedListNode {
    int val;
    struct LinkedListNode* next;
};


//-------------------- body of the code ------------------------



LinkedListNode* insertAtBeginning(LinkedListNode* head, int val) {
    LinkedListNode *temp=(LinkedListNode*)malloc(sizeof(LinkedListNode));
    temp->val=val;
    if(head==NULL)
    {
        head=temp;
        temp->next=NULL;
        return head;
    }
    temp->next=head;
    head=temp;
    return head;
}

LinkedListNode* insertAtEnd(LinkedListNode* head, int val) {
    LinkedListNode *temp=(LinkedListNode*)malloc(sizeof(LinkedListNode));
        temp->val=val;
        temp->next=NULL;
    if(head==NULL)
    {
       // insertAtBeginning(head,val);
        head=temp;
    }
    else{
        
        LinkedListNode *p=head;
        while(p->next)
        {
            p=p->next;
        }
        p->next=temp;
        
    }
    
    return head;
}

LinkedListNode* insertAtPosition(LinkedListNode* head, int val, int pos) {



    if(head==NULL || pos==1)
    {
        return insertAtBeginning(head,val);
    }
    
        LinkedListNode *temp=(LinkedListNode*)malloc(sizeof(LinkedListNode));
        temp->val=val;
        LinkedListNode *t=head;
    pos--; 
    while(pos-1>0)
        {
            pos--;
            t=t->next;
        }
 
        temp->next=t->next;
        t->next=temp;
    
    
    return head;
}

LinkedListNode* deleteAtBeginning(LinkedListNode* head) {
    
    if(head==NULL)
        return NULL;
    LinkedListNode *p=head->next;
    free(head);
    return p;

}
LinkedListNode* deleteAtEnd(LinkedListNode* head) {

    LinkedListNode *p=head;
    if (head==NULL)
        return NULL;
    if(p->next ==NULL)
    {
         
    free(p);
    return head->next;
    }
    while(p->next->next)
    {
        p=p->next;
    }
    free(p->next);
    p->next=NULL;
    return head;
}
LinkedListNode* deleteAtPosition(LinkedListNode* head, int pos) {
    LinkedListNode *t=head;
    if(pos==1)
    {
      
        return deleteAtBeginning(head);
    }
    pos--; 
    while(pos-1>0)
        {
            pos--;
            t=t->next;
        }
        LinkedListNode *p=t->next;
        
        t->next=p->next;    
       free(p);
       // t->next=;
    
    
    return head;

}

//-------------------- tail of the code ------------------------


int rng(int lim) {
    if (lim == 0) return 0;
    return rand()%lim;
}
int a[1005], sz = 0;
void insertt(int val, int pos) {
    if (pos < 0) return;
    if (pos > sz + 1) return;
    sz += 1;
    for (int i = sz; i > pos; i--)
        a[i] = a[i - 1];
    a[pos] = val;
}
void erasee(int pos) {
    if (pos > sz) return;
    if (pos < 1) return;
    sz--;
    for (int i = pos; i <= sz; i++)
        a[i] = a[i + 1];
}
int check(LinkedListNode* head) {
    for (int i = 1; i <= sz; i++) {
        if (head == NULL) return 0;
        if (head->val != a[i]) return 0;
        head = head->next;
    }    
    if (head != NULL) return 0;
    return 1;
}
int main() {
    srand(time(NULL));
    int t, n; in(t); in(n);
    while (t--) {
        LinkedListNode* head = NULL;
        sz = 0;
        for (int i = 0; i < n; i++) {
            int type = rng(6);
            if (type == 0) {
                int val = rng(1000);
                head = insertAtBeginning(head, val);
                insertt(val, 1);
                if (!check(head)) {
                    printf("incorrect insertAtBeginning");
                    return 0;
                }
            }

            if (type == 1) {
                int val = rng(1000);
                head = insertAtEnd(head, val);
                insertt(val, sz + 1);
                if (!check(head)) {
                    printf("incorrect insertAtEnd");
                    return 0;
                }
            }

            if (type == 2) {
                int val = rng(1000);
                int pos = rng(sz + 1) + 1;
                head = insertAtPosition(head, val, pos);
                insertt(val, pos);
                if (!check(head)) {
                    printf("incorrect insertAtPosition");
                    return 0;
                }
            }

            if (type == 3) {
                head = deleteAtBeginning(head);
                erasee(1);
                if (!check(head)) {
                    printf("incorrect deleteAtBeginning");
                    return 0;
                }
            }

            if (type == 4) {
                head = deleteAtEnd(head);
                erasee(sz);
                if (!check(head)) {
                    printf("incorrect deleteAtEnd");
                    return 0;
                }
            }

            if (type == 5) {
                int pos = rng(sz)+1;
                head = deleteAtPosition(head, pos);
                erasee(pos);
                if (!check(head)) {
                    printf("incorrect deleteAtPosition");
                    return 0;
                }
            }
        }
    }
    printf("correct");
}
