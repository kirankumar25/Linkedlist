#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>
typedef struct LinkedListNode LinkedListNode;

struct LinkedListNode {
    char val;
    LinkedListNode *next;
};

LinkedListNode* _insert_node_into_singlylinkedlist(LinkedListNode *head, LinkedListNode *tail, char val) {
    if(head == NULL) {
        head = (LinkedListNode *) (malloc(sizeof(LinkedListNode)));
        head->val = val;
        head->next = NULL;
        tail = head;
    }
    else {
        LinkedListNode *node = (LinkedListNode *) (malloc(sizeof(LinkedListNode)));
        node->val = val;
        node->next = NULL;
        tail->next = node;
        tail = tail->next;
    }
    return tail;
}
void display(LinkedListNode *head)
{
    LinkedListNode *p=head;
    while(p)
    {
        printf("%c ",p->val);
        p=p->next;
    }
}
LinkedListNode* Reverse(LinkedListNode* head) {
    LinkedListNode *p,*c,*n;
    if(head->next==NULL)
        return head;
    p=head;
    c=head->next;
    n=head->next->next;
    while(n)
    {
        c->next=p;
        p=c;
        c=n;
        n=n->next;
    }
    c->next=p;
    head->next=NULL;
    return c;
}

/*
 * Complete the function below.
 */
/*
For your reference:
LinkedListNode {
    char val;
    LinkedListNode *next;
};
*/
bool isPalindrome(LinkedListNode* head) {
    LinkedListNode *p=head,*q=head;
    while(q)
    {
        
        if(q->next==NULL)
        {
            p=p->next;
            break;
        }
        p=p->next;
        q=q->next->next;
    }
    //printf("middle is  %c\n ",p->val);
    q=Reverse(p);
    p=head;
    while(q)
    {
        if(p->val!=q->val)
        {
            return 0;
        }
        p=p->next;
        q=q->next;
    }
    return 1;
}

int main()
{
    FILE *f = stdout;
    char *output_path = getenv("OUTPUT_PATH");
    if (output_path) {
        f = fopen(output_path, "w");
    }

    bool res;
    int head_size = 0;

    LinkedListNode* head = NULL;
    LinkedListNode* head_tail = NULL;

    scanf("%d", &head_size);
     char s[10005];
      scanf(" %s", s);
    for(int i = 0; i < head_size; i++) {
        char head_item = s[i];
        head_tail = _insert_node_into_singlylinkedlist(head, head_tail, head_item);

        if(i == 0) {
            head = head_tail;
        }
    }
    if(head_size==1)
        fprintf(f, "1");
    else
    {res = isPalindrome(head);
    fprintf(f, "%d\n", res);}

    fclose(f);
    return 0;
}
